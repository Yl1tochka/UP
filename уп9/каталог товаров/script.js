// –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
const products = [
  { id: 1, name: "Kugoo Kirin M4", price: 29900, image: "https://via.placeholder.com/200x200?text= –°–∞–º–æ–∫–∞—Ç" },
  { id: 2, name: "Kugoo Kirin M4", price: 29900, image: "https://via.placeholder.com/200x200?text= –°–∞–º–æ–∫–∞—Ç" },
  // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
let cart = JSON.parse(localStorage.getItem("cart")) || [];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts() {
  const productGrid = document.querySelector(".product-grid");
  productGrid.innerHTML = "";

  products.forEach(product => {
    const card = document.createElement("div");
    card.classList.add("product-card");

    card.innerHTML = `
      <img src="${product.image}" alt="${product.name}">
      <div class="tag new">–ù–æ–≤—ã–π</div>
      <h3>${product.name}</h3>
      <p>2000 –ºAh | 1.2 –ø.—Å. | 60 –∫–º/—á | 5 —á–∞—Å–æ–≤</p>
      <p class="price">${product.price.toLocaleString()} ‚ÇΩ</p>
      <button class="buy-btn" data-id="${product.id}">–ö—É–ø–∏—Ç—å –≤ 1 –∫–ª–∏–∫</button>
    `;

    productGrid.appendChild(card);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
  const product = products.find(p => p.id === productId);

  if (product) {
    const existingItem = cart.find(item => item.id === productId);

    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      cart.push({ ...product, quantity: 1 });
    }

    localStorage.setItem("cart", JSON.stringify(cart));
    updateCart();
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
function renderCart() {
  const cartItemsList = document.getElementById("cart-items-list");
  cartItemsList.innerHTML = "";

  cart.forEach(item => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>
        <img src="${item.image}" alt="${item.name}" style="width: 50px; height: 50px;">
        <div>
          <strong>${item.name}</strong>
          <p>–í –Ω–∞–ª–∏—á–∏–∏ + 2 –ø–æ–¥–∞—Ä–∫–∞</p>
        </div>
      </td>
      <td>
        <button class="quantity-btn" data-action="decrease" data-id="${item.id}">-</button>
        <span>${item.quantity}</span>
        <button class="quantity-btn" data-action="increase" data-id="${item.id}">+</button>
      </td>
      <td>${(item.price * item.quantity).toLocaleString()} ‚ÇΩ</td>
      <td>
        <button class="remove-btn" data-id="${item.id}">üóëÔ∏è</button>
      </td>
    `;

    cartItemsList.appendChild(row);
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const totalCost = cart.reduce((total, item) => total + item.price * item.quantity, 0);
  document.querySelector(".cart-summary p:first-child").textContent = `${totalCost.toLocaleString()} ‚ÇΩ`;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
function updateQuantity(productId, action) {
  const item = cart.find(i => i.id === productId);

  if (action === "increase") {
    item.quantity += 1;
  } else if (action === "decrease" && item.quantity > 1) {
    item.quantity -= 1;
  }

  if (item.quantity === 0) {
    removeItemFromCart(productId);
  }

  localStorage.setItem("cart", JSON.stringify(cart));
  renderCart();
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeItemFromCart(productId) {
  cart = cart.filter(item => item.id !== productId);
  localStorage.setItem("cart", JSON.stringify(cart));
  renderCart();
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function init() {
  renderProducts();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –≤ 1 –∫–ª–∏–∫"
  document.querySelectorAll(".buy-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const productId = parseInt(btn.dataset.id);
      addToCart(productId);
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
  document.querySelectorAll(".quantity-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const productId = parseInt(btn.dataset.id);
      const action = btn.dataset.action;
      updateQuantity(productId, action);
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  document.querySelectorAll(".remove-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const productId = parseInt(btn.dataset.id);
      removeItemFromCart(productId);
    });
  });

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  renderCart();
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
init();